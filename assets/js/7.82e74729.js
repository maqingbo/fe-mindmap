(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{369:function(e,t,_){e.exports=_.p+"assets/img/layers.7ba7cd1c.png"},370:function(e,t,_){e.exports=_.p+"assets/img/flow.71f429bb.png"},371:function(e,t,_){e.exports=_.p+"assets/img/rendertree-domtree.a43a99a9.png"},431:function(e,t,_){"use strict";_.r(t);var v=_(46),r=Object(v.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"浏览器的组成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的组成"}},[e._v("#")]),e._v(" 浏览器的组成")]),e._v(" "),v("p",[e._v("浏览器大体上由以下几个组件组成：")]),e._v(" "),v("p",[v("img",{attrs:{src:_(369),alt:""}})]),e._v(" "),v("ol",[v("li",[v("strong",[e._v("用户界面")]),e._v("：包括地址栏，前进后退，书签菜单等窗口上除了网页显示区域以外的部分。")]),e._v(" "),v("li",[v("strong",[e._v("浏览器引擎")]),e._v("：在用户界面和呈现引擎之间传送指令。")]),e._v(" "),v("li",[v("strong",[e._v("渲染引擎")]),e._v("：负责显示请求的内容。比如请求到 HTML, 它会负责解析 HTML、CSS 并将结果显示到窗口中。")]),e._v(" "),v("li",[v("strong",[e._v("网络")]),e._v("：用于网络请求，如 HTTP 请求。它包括平台无关的接口和各平台独立的实现。")]),e._v(" "),v("li",[v("strong",[e._v("用户界面后端")]),e._v("：用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。")]),e._v(" "),v("li",[v("strong",[e._v("JS 解释器")]),e._v("：用于解析执行 JavaScript 代码。")]),e._v(" "),v("li",[v("strong",[e._v("数据存储持久层")]),e._v("：浏览器需要把所有数据存到硬盘上，如 cookies。新的 HTML5 规范规定了一个完整（虽然轻量级）的浏览器中的数据库 web database。")])]),e._v(" "),v("h2",{attrs:{id:"浏览器中的进程与线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中的进程与线程"}},[e._v("#")]),e._v(" 浏览器中的进程与线程")]),e._v(" "),v("h3",{attrs:{id:"进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[e._v("#")]),e._v(" 进程")]),e._v(" "),v("p",[e._v("进程是 cpu 的资源分配的最小单位。")]),e._v(" "),v("p",[e._v("多进程指的是在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态。多进程带来的好处是明显的，比如你可以听歌的同时，打开编辑器敲代码，编辑器和听歌软件的进程之间丝毫不会相互干扰。")]),e._v(" "),v("p",[e._v("现代浏览器是多进程的，浏览器的进程主要包括以下几种：")]),e._v(" "),v("ul",[v("li",[e._v("浏览器进程：浏览器的主进程（负责协调，主控）；")]),e._v(" "),v("li",[e._v("网络进程：负责发起和接受网络请求，是从主进程中剥离出来的；")]),e._v(" "),v("li",[e._v("插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建；")]),e._v(" "),v("li",[e._v("GPU 进程：UI 界面、3D 绘制；")]),e._v(" "),v("li",[e._v("渲染进程（内核）：控制页面渲染，脚本执行，事件处理等。默认每个 Tab 页面一个进程，互不影响。")])]),e._v(" "),v("p",[e._v("多进程的优点：")]),e._v(" "),v("ul",[v("li",[e._v("更稳定：一个页面卡死不会影响其他页面；")]),e._v(" "),v("li",[e._v("更安全：进程间相互独立，数据不共享；")])]),e._v(" "),v("h3",{attrs:{id:"线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[e._v("#")]),e._v(" 线程")]),e._v(" "),v("p",[e._v("渲染进程中的线程：")]),e._v(" "),v("p",[v("strong",[e._v("GUI 渲染线程")])]),e._v(" "),v("p",[e._v("负责渲染页面，解析 html 和 CSS、构建 DOM 树、CSSOM 树、渲染树、和绘制页面，重绘重排也是在该线程执行。")]),e._v(" "),v("p",[v("strong",[e._v("JS 引擎线程")])]),e._v(" "),v("p",[e._v("负责解析和执行 JS。一个 tab 页中只有一个 JS 引擎线程（单线程）。")]),e._v(" "),v("p",[e._v("在"),v("code",[e._v("JS 引擎线程")]),e._v("运行脚本期间，GUI 渲染线程是出于挂起状态的，所以脚本执行时间太长的话 UI 界面会变得卡顿。有以下两种应对方式：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("<script>")]),e._v("标签添加"),v("code",[e._v("defer")]),e._v("属性，这样就不会停止文档解析，而是等到文档解析结束才执行脚本。")]),e._v(" "),v("li",[v("code",[e._v("<script>")]),e._v("标签添加"),v("code",[e._v("async")]),e._v("属性（H5 新增），此时如果是普通脚本，会被并行执行，如果是模块脚本，会被放入任务队列，然后也是并行执行。")])]),e._v(" "),v("p",[v("strong",[e._v("计时器线程")])]),e._v(" "),v("p",[e._v("指 setInterval 和 setTimeout，因为 "),v("code",[e._v("JS 引擎")]),e._v("是单线程的，所以如果处于阻塞状态，那么计时器就会不准了，所以需要单独的线程来负责计时器工作。")]),e._v(" "),v("p",[v("strong",[e._v("事件触发线程")])]),e._v(" "),v("p",[e._v("主要控制事件循环，计时器、异步请求、I/O 事件等会被放入任务队列，等待"),v("code",[e._v("JS 引擎线程")]),e._v("处理。")]),e._v(" "),v("p",[v("strong",[e._v("异步 http 请求线程")])]),e._v(" "),v("p",[e._v("XMLHttpRequest 连接后浏览器开的一个线程，比如请求有回调函数，异步线程就会将回调函数加入事件队列，等待"),v("code",[e._v("JS 引擎")]),e._v("处理。")]),e._v(" "),v("h2",{attrs:{id:"渲染过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程"}},[e._v("#")]),e._v(" 渲染过程")]),e._v(" "),v("p",[e._v("用户请求的 HTML 文本 (text/html) 通过浏览器的网络层到达渲染引擎后，渲染工作开始。每次通常渲染不会超过 8K 的数据块，其中基础的渲染流程图：")]),e._v(" "),v("p",[v("img",{attrs:{src:_(370),alt:"Rendering engine basic flow"}}),v("br"),e._v(" "),v("em",[e._v("Rendering engine basic flow")])]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("解析 HTML 生成 DOM tree")]),e._v("：渲染引擎首先解析 HTML 文档，将各个标签转化成 DOM 节点，生成 DOM Tree。")]),e._v(" "),v("li",[v("strong",[e._v("生成 CSSOM Tree")]),e._v("：不管是内联式，外联式还是嵌入式引入的 CSS 样式会被解析生成 CSSOM Tree。")]),e._v(" "),v("li",[v("strong",[e._v("构建 Render Tree")]),e._v("：根据 DOM Tree 与 CSSOM Tree 生成渲染树 (Render Tree)。此时树上的每个节点已包含基本样式，不包括大小和位置信息。")]),e._v(" "),v("li",[v("strong",[e._v("布局 (Layout/Flow)")]),e._v("：为 Render Tree 上的每一个节点计算大小和对应在视口上的位置。再次执行这一步时称作"),v("strong",[e._v("重排/回流 (reflow)")]),e._v("。这一阶段，所有相对单位被转化为绝对单位。")]),e._v(" "),v("li",[v("strong",[e._v("绘制 (Paint)")]),e._v("：将 Render Tree 上的每一个节点转化成屏幕上的实际像素，然后将每一个节点绘制出来。再次执行这一步骤叫做"),v("strong",[e._v("重绘 (repaint)")]),e._v("。")])]),e._v(" "),v("p",[e._v("以上步骤是一个渐进的过程，为了提高用户体验，渲染引擎试图尽可能快的把结果显示给最终用户。它不会等到所有 HTML 都被解析完才创建并布局渲染树。它会在从网络层获取文档内容的同时把已经接收到的局部内容先展示出来。")]),e._v(" "),v("h2",{attrs:{id:"渲染细节"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渲染细节"}},[e._v("#")]),e._v(" 渲染细节")]),e._v(" "),v("h3",{attrs:{id:"生成-dom-tree"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生成-dom-tree"}},[e._v("#")]),e._v(" 生成 DOM Tree")]),e._v(" "),v("p",[e._v("HTML 解析由两个阶段组成：")]),e._v(" "),v("ul",[v("li",[e._v("标记化 (tokenization)：依据规范，识别 HTML 标签所对应的 DOM 对象以及该标签上的属性；")]),e._v(" "),v("li",[e._v("树构建 (tree construction)：以 Document 为根节点，将识别到的 DOM 对象构建成树形结构。")])]),e._v(" "),v("p",[e._v("解析过程中如果遇见 script 脚本会直接开始执行脚本，阻塞文档解析，有以下应对方式：")]),e._v(" "),v("ul",[v("li",[e._v("script 标签添加到文档最后面。")]),e._v(" "),v("li",[e._v("script 标签添加"),v("code",[e._v("defer")]),e._v("属性，脚本会等到解析完成后执行。")]),e._v(" "),v("li",[e._v("script 标签添加"),v("code",[e._v("async")]),e._v("属性，脚本会被加入任务队列。")])]),e._v(" "),v("p",[e._v("解析完成后，文档将被标识为"),v("code",[e._v("deferred")]),e._v("状态，并且触发"),v("code",[e._v("DOMContentLoaded")]),e._v("事件，意思就是可以解析带有"),v("code",[e._v("defer")]),e._v("属性的 script 脚本了。页面所有内容（图像、样式、脚本）加载完成后会触发"),v("code",[e._v("Load")]),e._v("事件。")]),e._v(" "),v("h3",{attrs:{id:"生成-cssom-tree"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生成-cssom-tree"}},[e._v("#")]),e._v(" 生成 CSSOM Tree")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.w3.org/TR/CSS2/intro.html#q2.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("W3c 的 CSS 2.1 规范"),v("OutboundLink")],1),e._v(" 中给出了 CSSOM Tree 构建的大概流程（仅供参考，与实现不完全相同）：")]),e._v(" "),v("ol",[v("li",[e._v("识别设备的媒体类型；")]),e._v(" "),v("li",[e._v("筛选所有样式表中适配该媒体类型的样式表；")]),e._v(" "),v("li",[e._v("根据选择器为 DOM Tree 做标注，然后为属性赋值；\n"),v("ul",[v("li",[e._v("值的计算：不同媒体类型有不同算法。例如媒体类型是 screen 的话，使用的就是 "),v("RouterLink",{attrs:{to:"/parts/css/keyConcepts.html#视觉排版模型"}},[e._v("视觉格式化模型 (visual formatting model)")])],1)])]),e._v(" "),v("li",[e._v("根据有标注的 DOM Tree，生成 CSSOM Tree，两棵树并不完全一致；")])]),e._v(" "),v("h3",{attrs:{id:"生成-render-tree"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生成-render-tree"}},[e._v("#")]),e._v(" 生成 Render Tree")]),e._v(" "),v("p",[e._v("为构建渲染树，浏览器大体上完成了下列工作：")]),e._v(" "),v("ul",[v("li",[e._v("从 DOM 树的根节点开始遍历每个可见节点。")]),e._v(" "),v("li",[e._v("某些节点不可见（例如 script、meta 等），因为它们不会体现在渲染输出中，所以会被忽略。")]),e._v(" "),v("li",[e._v("某些节点设置了"),v("code",[e._v("display: none")]),e._v("属性，也会被忽略。（"),v("code",[e._v("visibility: hidden")]),e._v("不会被忽略）")]),e._v(" "),v("li",[e._v("对每个可见节点添加 CSSOM Tree 上所对应的规则。")])]),e._v(" "),v("h3",{attrs:{id:"render-tree-和-dom-tree-的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#render-tree-和-dom-tree-的关系"}},[e._v("#")]),e._v(" Render Tree 和 DOM Tree 的关系")]),e._v(" "),v("ul",[v("li",[e._v("并非一一对应：不可见元素（meta、head），设置了"),v("code",[e._v("display: none")]),e._v("的元素将不会出现在 Render Tree 中；")]),e._v(" "),v("li",[e._v("一些 DOM 元素会对应多个 Render Tree 节点 (Render Object)，比如"),v("code",[e._v("select")]),e._v("元素；")]),e._v(" "),v("li",[e._v("另一个一对多的情况：根据 CSS 2.1 规范，一个行内元素只能包含一个行内元素或块级元素，如果既包含了块级也包含了行内元素，解析器则会创建匿名的 block render object 以包裹外面的行内元素。")]),e._v(" "),v("li",[e._v("一些 Render Tree 节点在树中的位置与 DOM Tree 中不一致，比如使用了浮动和绝对定位的元素。")])]),e._v(" "),v("p",[v("img",{attrs:{src:_(371),alt:""}}),e._v(" "),v("em",[e._v("Render Tree 及其对应的 DOM Tree")])]),e._v(" "),v("h3",{attrs:{id:"layout"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#layout"}},[e._v("#")]),e._v(" Layout")]),e._v(" "),v("p",[e._v("Render Tree 构造出来之后，节点上并没有元素的位置和大小等信息，计算这些值的过程称为布局 (Layout/Flow)。")]),e._v(" "),v("p",[e._v("HTML 采用流式布局，只要一次遍历就能计算出这些信息，基本过程是以浏览器可见区域的左上角"),v("code",[e._v("(0, 0)")]),e._v("为基础坐标，从左到右、从上到下的顺序对文档进行遍历（table 除外，所以你要避免使用 table 布局）。布局阶段输出的结果就是盒模型，精确地表示了每一个元素的位置和大小，并且所有的相对单位此时也转化为了绝对单位。")]),e._v(" "),v("h2",{attrs:{id:"重绘-repaint-和回流-重排-reflow"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重绘-repaint-和回流-重排-reflow"}},[e._v("#")]),e._v(" 重绘（repaint）和回流（重排，reflow）")]),e._v(" "),v("p",[e._v("通过上的面分析我们得知，回流其实就是重新执行 Layout/Flow 这一步，重绘其实就是重新执行 Paint 这一步。")]),e._v(" "),v("p",[e._v("回流阶段时，浏览器会重新遍历整个 Render Tree 以计算节点的位置和大小，然后再次执行 Paint，性能消耗比 repaint 要大得多。")]),e._v(" "),v("p",[v("strong",[e._v("会导致回流的操作")])]),e._v(" "),v("p",[e._v("涉及到改变元素大小或位置的操作，基本上都会引发回流。")]),e._v(" "),v("ul",[v("li",[e._v("页面首次渲染")]),e._v(" "),v("li",[e._v("浏览器窗口大小发生改变")]),e._v(" "),v("li",[e._v("元素尺寸或位置发生改变")]),e._v(" "),v("li",[e._v("元素内容变化（文字数量或图片大小等等）")]),e._v(" "),v("li",[e._v("元素字体大小变化")]),e._v(" "),v("li",[e._v("添加或者删除可见的 DOM 元素")]),e._v(" "),v("li",[e._v("激活 CSS 伪类（例如："),v("code",[e._v(":hover")]),e._v("）")]),e._v(" "),v("li",[e._v("查询某些属性或调用某些方法")])]),e._v(" "),v("p",[e._v("一些常用且会导致回流的属性和方法：")]),e._v(" "),v("ul",[v("li",[e._v("clientWidth、clientHeight、clientTop、clientLeft")]),e._v(" "),v("li",[e._v("offsetWidth、offsetHeight、offsetTop、offsetLeft")]),e._v(" "),v("li",[e._v("scrollWidth、scrollHeight、scrollTop、scrollLeft")]),e._v(" "),v("li",[e._v("scrollIntoView()、scrollIntoViewIfNeeded()")]),e._v(" "),v("li",[e._v("getComputedStyle()")]),e._v(" "),v("li",[e._v("getBoundingClientRect()")]),e._v(" "),v("li",[e._v("scrollTo()")])]),e._v(" "),v("p",[v("strong",[e._v("会导致重绘的操作")])]),e._v(" "),v("p",[e._v("当页面中元素样式的改变但并不影响它在文档流中的位置时（例如：color、background-color、visibility 等），浏览器会将新样式赋予给元素并重新绘制它。")]),e._v(" "),v("p",[v("strong",[e._v("浏览器内部的优化")])]),e._v(" "),v("p",[e._v("现代浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。")]),e._v(" "),v("p",[e._v("但是当你访问以下涉及布局的属性或方法时，浏览器会立刻清空队列：")]),e._v(" "),v("ul",[v("li",[e._v("width、height")]),e._v(" "),v("li",[e._v("clientWidth、clientHeight、clientTop、clientLeft")]),e._v(" "),v("li",[e._v("offsetWidth、offsetHeight、offsetTop、offsetLeft")]),e._v(" "),v("li",[e._v("scrollWidth、scrollHeight、scrollTop、scrollLeft")]),e._v(" "),v("li",[e._v("getComputedStyle()")]),e._v(" "),v("li",[e._v("getBoundingClientRect()")])]),e._v(" "),v("p",[e._v("因为队列中可能会有影响到这些属性或方法返回值的操作，即使你希望获取的信息与队列中操作引发的改变无关，浏览器也会强行清空队列，确保你拿到的值是最精确的。")]),e._v(" "),v("p",[e._v("更多可参考："),v("a",{attrs:{href:"https://gist.github.com/paulirish/5d52fb081b3570c81e3a",target:"_blank",rel:"noopener noreferrer"}},[e._v("What forces layout？"),v("OutboundLink")],1)]),e._v(" "),v("p",[v("strong",[e._v("如何减少不必要的回流")])]),e._v(" "),v("ul",[v("li",[e._v("合并对样式的多次修改，使用 cssText 或修改 class 属性；")]),e._v(" "),v("li",[e._v("需要对 DOM 进行频繁修改时，可使其脱离文档流，修改完再插入文档流；\n"),v("ul",[v("li",[e._v("可使用"),v("code",[e._v("display: none")]),e._v("隐藏元素")]),e._v(" "),v("li",[e._v("使用 document fragment 在当前 DOM 之外构建一个子树，再把它拷贝回文档。(document.createDocumentFragment())")]),e._v(" "),v("li",[e._v("将元素拷贝到一个脱离文档的节点中，修改节点后，再替换原始的元素。（基于 cloneNode）")])])]),e._v(" "),v("li",[e._v("避免频繁调用涉及布局的 API；")]),e._v(" "),v("li",[e._v("CSS3 硬件加速（GPU 加速）；")])]),e._v(" "),v("h2",{attrs:{id:"关键渲染路径与阻塞渲染"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关键渲染路径与阻塞渲染"}},[e._v("#")]),e._v(" 关键渲染路径与阻塞渲染")]),e._v(" "),v("p",[e._v("Todo")]),e._v(" "),v("h2",{attrs:{id:"性能优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[e._v("#")]),e._v(" 性能优化")]),e._v(" "),v("ul",[v("li",[e._v("结合渲染流程，可以针对性的优化渲染性能：")]),e._v(" "),v("li",[e._v("优化 JS 的执行效率")]),e._v(" "),v("li",[e._v("降低样式计算的范围和复杂度")]),e._v(" "),v("li",[e._v("避免大规模、复杂的布局")]),e._v(" "),v("li",[e._v("简化绘制的复杂度、减少绘制区域")]),e._v(" "),v("li",[e._v("优先使用渲染层合并属性、控制层数量")]),e._v(" "),v("li",[e._v("对用户输入事件的处理函数去抖动（移动设备）")])]),e._v(" "),v("p",[e._v("Todo")]),e._v(" "),v("h2",{attrs:{id:"参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器的工作原理：现代网络浏览器幕后揭秘 - HTML5 Rocks"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work",target:"_blank",rel:"noopener noreferrer"}},[e._v("渲染页面：浏览器的工作原理 - MDN"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction",target:"_blank",rel:"noopener noreferrer"}},[e._v("渲染树构建、布局及绘制 - Google"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzUyNDYxNDAyMg==&mid=2247484405&idx=1&sn=64fca96a6fc7fc2bf11e2da6079de678&chksm=fa2be31ccd5c6a0aad0b37aa57a16d416280a2e6c2f6458b3da756fe168f7ed5a4e7981ca919&mpshare=1&scene=1&srcid=#rd",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器渲染基本原理解析"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://juejin.cn/post/6844903569087266823",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器的回流与重绘 - 掘金"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?utm_source=devtools#avoid-forced-synchronous-layouts",target:"_blank",rel:"noopener noreferrer"}},[e._v("避免大型、复杂的布局和布局抖动 - Google"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);