(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{402:function(t,v,_){t.exports=_.p+"assets/img/3D.1e462ef4.png"},403:function(t,v,_){t.exports=_.p+"assets/img/frustum-1.5c46e119.png"},404:function(t,v,_){t.exports=_.p+"assets/img/frustum-2.620f4f20.png"},405:function(t,v,_){t.exports=_.p+"assets/img/frustum-3.666928a0.png"},406:function(t,v,_){t.exports=_.p+"assets/img/stanford-bunny.dfbd3a6b.jpg"},486:function(t,v,_){"use strict";_.r(v);var e=_(46),r=Object(e.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#历史"}},[t._v("#")]),t._v(" 历史")]),t._v(" "),e("p",[t._v("之前的三维程序都是运行在 OpenGL 和微软公司的 DirectX 上的，PC 端大型游戏都是在此基础上开发的。随着移动技术的发展，手机上有了许多使用三维程序的场景，所以 OpenGL 标准委员会就在之前的 OpenGL 基础上开发了一个缩减版的 OpenGL 叫做 OpenGL ES，目前智能手机操作系统都是基于 OpenGL ES 来开发三维程序的。")]),t._v(" "),e("p",[t._v("同时为了能在浏览器上运行三维程序，就在 OpenGL ES 2.0 的基础上开发出了 WebGL 标准，把 JavaScript 和 OpenGL ES 2.0 绑定起来。WebGL 可以为 HTML5-Canvas 提供硬件 3D 加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅的展示 3D 场景和模型了。")]),t._v(" "),e("p",[t._v("WebGL 的功能很强大，但是还是偏底层，开发时非常复杂且容易出错，Three.js 就是把 WebGL 包装了一层，可以让我们方便快速的实现常见功能。")]),t._v(" "),e("p",[e("img",{attrs:{src:_(402),alt:""}})]),t._v(" "),e("p",[t._v("Three.js 常见功能：")]),t._v(" "),e("ul",[e("li",[t._v("创建简单和复杂的三维几何图像")]),t._v(" "),e("li",[t._v("在三维场景下创建和移动物体")]),t._v(" "),e("li",[t._v("为物体添加纹理和材质")]),t._v(" "),e("li",[t._v("使用各种光源来装饰场景")]),t._v(" "),e("li",[t._v("加载三维软件所创建的模型")]),t._v(" "),e("li",[t._v("使用自定义的着色器")]),t._v(" "),e("li",[t._v("创建虚拟现实 (VR) 和增强现实 (AR) 场景")]),t._v(" "),e("li",[t._v("为三维场景添加高级的后期处理效果")]),t._v(" "),e("li",[t._v("创建点云（粒子系统）")])]),t._v(" "),e("p",[t._v("Three.js 优缺点：")]),t._v(" "),e("ul",[e("li",[t._v("Three.js 擅长 WebGL 场景渲染，作为 JS 类库特别原生、灵活、自由度高。")]),t._v(" "),e("li",[t._v("Three.js 不擅长物理碰撞，因此不适合开发 3D 游戏。")])]),t._v(" "),e("h2",{attrs:{id:"canvas-元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#canvas-元素"}},[t._v("#")]),t._v(" Canvas 元素")]),t._v(" "),e("p",[t._v("todo")]),t._v(" "),e("p",[t._v("https://stackoverflow.com/questions/15558418/how-do-you-save-an-image-from-a-three-js-canvas")]),t._v(" "),e("h2",{attrs:{id:"核心知识分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心知识分类"}},[t._v("#")]),t._v(" 核心知识分类")]),t._v(" "),e("p",[t._v("使用 Three.js 开发 3D 程序需要两方面的核心知识：")]),t._v(" "),e("ul",[e("li",[t._v("3D 美术知识：相机、光源、mesh、geomerty、material 等等，这些知识不止在 3D 程序中会用到，建模等场景也会使用，基础美术能力决定了你对 3D 的了解。计算机图形学也是用的这一套，可能会加入一些数学方面的知识。")]),t._v(" "),e("li",[t._v("JS 编程能力：知道如何使用 JS 进行面向对象编程，构建程序的时候，如何做到清晰的模块化，代码该如何组织，数据和视图如何绑定等等。")])]),t._v(" "),e("h2",{attrs:{id:"技术关键词"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#技术关键词"}},[t._v("#")]),t._v(" 技术关键词")]),t._v(" "),e("h3",{attrs:{id:"场景-scene"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#场景-scene"}},[t._v("#")]),t._v(" 场景 (Scene)")]),t._v(" "),e("p",[t._v("场景能够让你在什么地方、摆放什么东西来交给 three.js 来渲染，这是你放置物体、灯光和摄像机的地方。")]),t._v(" "),e("h3",{attrs:{id:"相机-camera"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相机-camera"}},[t._v("#")]),t._v(" 相机 (Camera)")]),t._v(" "),e("p",[t._v("场景中的相机，代替人眼去观察，场景中只能添加一个。")]),t._v(" "),e("p",[t._v("three.js 中常用的相机有两种，透视相机和正交相机：")]),t._v(" "),e("p",[e("strong",[t._v("透视相机 (PerspectiveCamera)")])]),t._v(" "),e("p",[t._v("模拟人眼，近大远小，更适合 3D 渲染；")]),t._v(" "),e("p",[t._v("我们在创建透视相机的时候，需要定义一个"),e("strong",[t._v("视锥 (Frustum)")]),t._v("，随后在渲染的时候，计算机会将视锥中的所有三维物体投影到我们的二维屏幕上。")]),t._v(" "),e("p",[e("img",{attrs:{src:_(403),alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:_(404),alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("正交相机 (OrthographicCamera)")])]),t._v(" "),e("p",[t._v("物体尺寸与镜头远近无关，主要被应用在 CAD 等这种需要精确测量物体尺寸的应用场景中；")]),t._v(" "),e("p",[t._v("正交相机的视锥是一个长方体：")]),t._v(" "),e("p",[e("img",{attrs:{src:_(405),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"物体对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#物体对象"}},[t._v("#")]),t._v(" 物体对象")]),t._v(" "),e("p",[t._v("包括二维物体（点、线、面）、三维物体，模型等等。")]),t._v(" "),e("p",[t._v("在计算机的世界里，一条弧线是由有限个点构成的有限条线段连接得到的。当线段数量越多，长度就越短，当达到你无法察觉这是线段时，一条平滑的弧线就出现了。 计算机的三维模型也是类似的。只不过线段变成了平面，空间中确定一个平面最少需要三个点，所以普遍用三角形组成的网格来描述。我们把这种模型称之为"),e("strong",[t._v("网格 (Mesh) 模型")]),t._v("。")]),t._v(" "),e("p",[e("img",{attrs:{src:_(406),alt:""}})]),t._v(" "),e("p",[e("em",[t._v("计算机图形学中著名的斯坦福兔子")])]),t._v(" "),e("p",[e("strong",[t._v("网格 (Mesh)")])]),t._v(" "),e("p",[t._v("在 three.js 中，Mesh = 几何体 (Geometry) + 材质 (Material) 。")]),t._v(" "),e("p",[t._v("网格包含的内容为：几何体、几何体的材质、几何体的自身网格坐标体系。")]),t._v(" "),e("p",[t._v("同一个材质和几何体可以被多个网格对象使用。")]),t._v(" "),e("p",[t._v("一个场景可以同时添加多个网格。")]),t._v(" "),e("p",[e("strong",[t._v("几何体 (Geometry)")])]),t._v(" "),e("p",[t._v("顾名思义，几何体用来表现物体的"),e("strong",[t._v("形状")]),t._v("。例如 球体、立方体、平面、以及自定义的几何体（汽车、动物、房子、数目等）。")]),t._v(" "),e("p",[t._v("在 Three.js 中，一个几何体的来源有 3 个：")]),t._v(" "),e("ul",[e("li",[t._v("Three.js 中内置的一些基本几何体")]),t._v(" "),e("li",[t._v("自己创建自定义的几何体")]),t._v(" "),e("li",[t._v("通过文件加载进来的几何体")])]),t._v(" "),e("p",[t._v("three.js 中内置了许多基本的几何图元 (Primitives)，命名全部以"),e("code",[t._v("Geometry")]),t._v("结尾，我们可以使用这些图元快速创建常见的 Geometry：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("类型")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("BoxGeometry")]),t._v(" "),e("td",[t._v("立方体")])]),t._v(" "),e("tr",[e("td",[t._v("CircleGeometry")]),t._v(" "),e("td",[t._v("圆形")])]),t._v(" "),e("tr",[e("td",[t._v("ConeGeometry")]),t._v(" "),e("td",[t._v("圆锥体")])]),t._v(" "),e("tr",[e("td",[t._v("CylinderGeometry")]),t._v(" "),e("td",[t._v("圆柱体")])]),t._v(" "),e("tr",[e("td",[t._v("SphereGeometry")]),t._v(" "),e("td",[t._v("球体")])]),t._v(" "),e("tr",[e("td",[t._v("TetrahedronGeometry")]),t._v(" "),e("td",[t._v("四面体")])]),t._v(" "),e("tr",[e("td",[t._v("TorusGeometry")]),t._v(" "),e("td",[t._v("圆环体")])])])]),t._v(" "),e("p",[e("strong",[t._v("材质 (Material)")])]),t._v(" "),e("p",[t._v("Material 代表三维物体的材质，材质表示的是物体对光照的反应，表示除了形状以外所有可视属性的集合，例如色彩、纹理、光滑度、透明度、反射率、折射率、发光度等。")]),t._v(" "),e("p",[t._v("同样的，three.js 中内置了一些常用的材质函数：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("类型")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("PointsMaterial")]),t._v(" "),e("td",[t._v("点")])]),t._v(" "),e("tr",[e("td",[t._v("LineBasicMaterial")]),t._v(" "),e("td",[t._v("实线")])]),t._v(" "),e("tr",[e("td",[t._v("LineDashedMaterial")]),t._v(" "),e("td",[t._v("虚线")])]),t._v(" "),e("tr",[e("td",[t._v("MeshBasicMaterial")]),t._v(" "),e("td",[t._v("基础网格（不反射光，显示材质本身的颜色）")])]),t._v(" "),e("tr",[e("td",[t._v("MeshPhongMaterial")]),t._v(" "),e("td",[t._v("Phong 网格（镜面高光）")])]),t._v(" "),e("tr",[e("td",[t._v("MeshLambertMaterial")]),t._v(" "),e("td",[t._v("Lambert 网格（非镜面高光）")])]),t._v(" "),e("tr",[e("td",[t._v("MeshStandardMaterial")]),t._v(" "),e("td",[t._v("标准物理网格（逼真，耗性能）")])]),t._v(" "),e("tr",[e("td",[t._v("MeshPhysicalMaterial")]),t._v(" "),e("td",[t._v("物理网格（逼真，耗性能）")])]),t._v(" "),e("tr",[e("td",[t._v("MeshToonMaterial")]),t._v(" "),e("td",[t._v("卡通效果")])])])]),t._v(" "),e("p",[e("strong",[t._v("纹理 (Texture)")])]),t._v(" "),e("p",[t._v("纹理可以简单理解为一种图像或一张图片，用来包裹到几何体表面上。")]),t._v(" "),e("p",[t._v("纹理来源可以是：")]),t._v(" "),e("ul",[e("li",[t._v("通过文件加载进来")]),t._v(" "),e("li",[t._v("在画布上生成")]),t._v(" "),e("li",[t._v("由另外一个场景渲染出")])]),t._v(" "),e("h3",{attrs:{id:"光源-light"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#光源-light"}},[t._v("#")]),t._v(" 光源 (Light)")]),t._v(" "),e("p",[t._v("场景中的光照，如果不添加光照场景将会是一片漆黑。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("名称")]),t._v(" "),e("th",[t._v("类型")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("AmbientLight")]),t._v(" "),e("td",[t._v("环境光")])]),t._v(" "),e("tr",[e("td",[t._v("PointLight")]),t._v(" "),e("td",[t._v("点光源")])]),t._v(" "),e("tr",[e("td",[t._v("SpotLight")]),t._v(" "),e("td",[t._v("聚光灯")])]),t._v(" "),e("tr",[e("td",[t._v("DirectionalLight")]),t._v(" "),e("td",[t._v("平行光")])]),t._v(" "),e("tr",[e("td",[t._v("HemisphereLight")]),t._v(" "),e("td",[t._v("自然光/半球光")])]),t._v(" "),e("tr",[e("td",[t._v("RectAreaLight")]),t._v(" "),e("td",[t._v("平面光")])])])]),t._v(" "),e("h3",{attrs:{id:"渲染器-renderer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染器-renderer"}},[t._v("#")]),t._v(" 渲染器 (Renderer)")]),t._v(" "),e("p",[t._v("场景的渲染方式，如 webGL\\canvas2D\\Css3D，webGL 最常用。")]),t._v(" "),e("h3",{attrs:{id:"控制器-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制器-control"}},[t._v("#")]),t._v(" 控制器 (Control)")]),t._v(" "),e("p",[t._v("可通过键盘、鼠标控制相机的移动。")]),t._v(" "),e("h2",{attrs:{id:"three-js-中的其他功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#three-js-中的其他功能"}},[t._v("#")]),t._v(" Three.js 中的其他功能")]),t._v(" "),e("h3",{attrs:{id:"加载外部模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加载外部模型"}},[t._v("#")]),t._v(" 加载外部模型")]),t._v(" "),e("p",[t._v("除了自建立方体之外，我们还可以加载外部模型，比如 C4D、3DMax 等创建好的复杂模型。")]),t._v(" "),e("p",[t._v("加载外部模型，是通过 Three.js 加载器 (Loader) 实现的，每个加载器对应某种特定的文件格式。加载器把文本/二进制的模型文件转化为 Three.js 对象结构。")]),t._v(" "),e("h3",{attrs:{id:"动画"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动画"}},[t._v("#")]),t._v(" 动画")]),t._v(" "),e("p",[t._v("todo")]),t._v(" "),e("h3",{attrs:{id:"粒子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#粒子"}},[t._v("#")]),t._v(" 粒子")]),t._v(" "),e("p",[t._v("todo")]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.bilibili.com/video/BV1g44y1L7np?spm_id_from=333.337.search-card.all.click",target:"_blank",rel:"noopener noreferrer"}},[t._v("three.js 入门教程（合集）"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6844903425272987662",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebGL 技术储备指南"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=3OYNerkxI-U&ab_channel=%E6%9E%81%E5%AE%A2%E6%B9%BEGeekerwan",target:"_blank",rel:"noopener noreferrer"}},[t._v("DirectX 和 OpenGL - 极客湾"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.bilibili.com/video/BV1zU4y1L7Go?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速上手 Three.js - 奇乐编程学院"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/puxiao/threejs-tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("puxiao - Github"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/27296011",target:"_blank",rel:"noopener noreferrer"}},[t._v("知乎专栏"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);